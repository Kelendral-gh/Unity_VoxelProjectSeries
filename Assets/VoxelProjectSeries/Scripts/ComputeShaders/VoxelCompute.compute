// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "VoxelValues.cginc"
#include "Voxel.compute"

struct sharedVert
{
    uint index;
    float3 pnt;
    bool set;
};

StructuredBuffer<VoxelDetails> voxelColors;
RWStructuredBuffer<Voxel> voxelArray;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<float4> colorBuffer;
RWStructuredBuffer<int> indexBuffer;
RWStructuredBuffer<int> transparentIndexBuffer;
RWStructuredBuffer<uint> counter;

float3 chunkPosition;

uint chunkSizeX;
uint chunkSizeY;
bool sharedVertices;
bool useTextures;

float packFloats(float xF, float yF)
{
    float2 output = float2(xF, yF);
    output.x = floor(output.x * (100 - 1));
    output.y = floor(output.y * (100 - 1));

    return (output.x * 100) + output.y;
}

uint flattenCoord(uint3 idx)
{
    return idx.x + (idx.y * (chunkSizeX + 3)) + (idx.z * (chunkSizeX + 3) * (chunkSizeY + 1));
}

float3 ApproximateZeroCrossing(float3 adjacentPos, float3 adjacency)
{
    float3 pnt, roundedDown, stepF;
    int3 step;
    float t = 0, currentT = 0, increment = .25;
    bool startDensity = false;
    bool initial = false;
    while (currentT <= 1)
    {
        pnt = adjacentPos + (adjacency - adjacentPos) * currentT;
        roundedDown = floor(pnt);
        stepF = (pnt - roundedDown) * 4;
        step = (int3) stepF;

        /*if (!initial)
        {
            startDensity = voxelArray[flattenCoord(roundedDown)].getVoxelDensity(step.x, step.y, step.z);
            initial = true;
        }
        else*/
        {
            if (voxelArray[flattenCoord(roundedDown)].getVoxelDensity(step.x, step.y, step.z) != startDensity)
            {
                t = currentT;
                break;
            }

        }

        currentT += increment;
    }

    return adjacentPos + (adjacency - adjacentPos) * t;
}

void calculateContour(uint3 blockCoord, out float3 position, out float3 normal, float3 vertexPos, int idx)
{
    Voxel adjacentVoxel, adjacentVoxelB;
    float3 adjacentCell, adjacentCellB;
    float3 vWorldPos = blockCoord + vertexPos; //take local block coord, add the cubed position
    int counter = 0;
    
    for (int ax = 0; ax < 3; ax++)
    {
        for (int corner = 0; corner < 4; corner++)
        {
            adjacentCell = vWorldPos + CellCentersByAxis[ax][corner]; //getCellCenterForIDX(0, ax, corner);
            adjacentCellB = adjacentCell + axis[ax];
            
            adjacentVoxel = voxelArray[flattenCoord(adjacentCell)];
            adjacentVoxelB = voxelArray[flattenCoord(adjacentCellB)];
           
            if (adjacentVoxel.isSolid() != adjacentVoxelB.isSolid())
            {
                position += ApproximateZeroCrossing(adjacentCell, adjacentCellB);
                counter++;
            }

        }
    }

    normal = float3(0, 0, 0);
    position /= counter;
    
    if (any(position < vWorldPos - float3(1, 1, 1)) || any(position > vWorldPos + float3(1, 1, 1)))
        position = vWorldPos;
    
}

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xz > chunkSizeX) || any(id.xz < 1))
        return;
    
    Voxel block = voxelArray[flattenCoord(id)];
    int blockID = block.getId();

    if (blockID == 0)
        return;
    
    float4 color = float4(blockID == 240 ? 240 :
        (useTextures && voxelColors[blockID - 1].color == -1 ? ((float) blockID - 1) : voxelColors[blockID - 1].color),
        packFloats(voxelColors[blockID - 1].metallic, voxelColors[blockID - 1].smoothness), 0, 0);
    uint vertCount = 0;
    uint triCount = 0;
    
    sharedVert verts[8];
    
    for (int j = 0; j < 8; j++)
    {
        float3 pos, norm;
        calculateContour(id, pos, norm, voxelVertices[j], j);
        pos += chunkPosition;
        verts[j].pnt = pos;
        verts[j].set = false;
    }
    
    for (int i = 0; i < 6; i++)
    {
        
        //Check if there's a solid block against this face
        if (any(id + voxelFaceChecks[i] < 0) || (voxelArray[flattenCoord(id + voxelFaceChecks[i])].isSolid() && !voxelArray[flattenCoord(id + voxelFaceChecks[i])].isTransparent()))
            continue;

        if (blockID == 240 && voxelArray[flattenCoord(id + voxelFaceChecks[i])].isTransparent())
            continue;
        
        //Draw this face
        //Collect the appropriate vertices from the default vertices and add the block position
        if (!sharedVertices)
        {
            InterlockedAdd(counter[0], 6, vertCount);
            if (blockID != 240)
                InterlockedAdd(counter[1], 6, triCount);
            else
                InterlockedAdd(counter[2], 6, triCount);
           
        
            for (int k = 0; k < 6; k++)
            {
                vertexBuffer[vertCount + k] = verts[voxelTrisMapped[i][k]].pnt;
                color.b = voxelUVs[voxelTris[i][k]].x;
                color.a = voxelUVs[voxelTris[i][k]].y;
                colorBuffer[vertCount + k] = color;
                if (blockID != 240)
                    indexBuffer[triCount + k] = vertCount + k;
                else
                    transparentIndexBuffer[triCount + k] = vertCount + k;
            }
        }
        else
        {
            if (blockID != 240)
                InterlockedAdd(counter[1], 6, triCount);
            else
                InterlockedAdd(counter[2], 6, triCount);
            for (int k = 0; k < 6; k++)
            {
                int idx = voxelTrisMapped[i][k];
                if (!verts[idx].set)
                {
                    InterlockedAdd(counter[0], 1, vertCount);
                    verts[idx].index = vertCount;
            
                    vertexBuffer[vertCount] = verts[idx].pnt;
                    normalBuffer[vertCount] = float3(0, 0, 0);
                    colorBuffer[vertCount] = color;
                }
				
                if (blockID != 240)
                    indexBuffer[triCount + k] = verts[idx].index;
                else
                    transparentIndexBuffer[triCount + k] = verts[idx].index;
            }

        }
    }
}
    
